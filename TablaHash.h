/*
Implement with array using linear probing
	hash(k, m) - m is size of hash table
	add(key, value) - if key already exists, update value
	exists(key)
	get(key)
	remove(key)
*/
///////////////////////////////////////////////////////BIBLIOTECAS///////////////////////////////////////////////////////
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/////////////////////////////////////////////////////////DEFINES/////////////////////////////////////////////////////////
#define TABLE_SIZE			10
#define SMALL_PRIME_NUM		103
#define MEDIUM_PRIME_NUM	100003
#define BIG_PRIME_NUM		1000000003
////////////////////////////////////////////////////////VARIABLES////////////////////////////////////////////////////////
int HashTableSize = TABLE_SIZE;
///////////////////////////////////////////////////////ESTRUCTURAS///////////////////////////////////////////////////////
typedef struct
{
	int *arr;
}HashTable;
/////////////////////////////////////////////////PROTOTIPOS DE FUNCIONES/////////////////////////////////////////////////
unsigned int hash(char* /*key*/);
void add(char* /*key*/,int /*value*/);
bool exists(char* /*key*/);
int get(char* /*key*/);
void remove(char* /*key*/);

//AUX FUNC.
void initHashTable(HashTable*);
////////////////////////////////////////////////////////FUNCIONES////////////////////////////////////////////////////////
void initHashTable(HashTable *ht, int m){
	ht->arr = (int*)malloc(sizeof(int)*m);
	HashTableSize = m;
}

unsigned int hash(char *key){
	int length = strlen(key);
	unsigned int hash = 0;

	for (int i = 0; i < length; i++){
		hash += *(key + i) * *key;
		hash *= SMALL_PRIME_NUM;
	}

	hash %= HashTableSize;

	return hash;
}
///////////////////////////////////////////////////////////FIN///////////////////////////////////////////////////////////